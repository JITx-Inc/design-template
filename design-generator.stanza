; Generated by JITX <JITX-VERSION>
#use-added-syntax(jitx)
defpackage design-template :
  import core
  import jitx
  import jitx/commands
  import ocdb/generic-components

; =========================
; Module to run as a design
; ==========================
val board-shape = RoundedRectangle(30.0, 18.5, 0.25)
pcb-module my-design :

  inst version-label  : ocdb/board-text/version-silkscreen("Version 0.0")
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom
  
; ========================================
; Configure the design and view the result
; ========================================
defn run-design (circuit:Instantiable, check?:True|False) :
  set-design-directory("CAD")

  set-board(ocdb/defaults/default-board(ocdb/stackups/jlcpcb-jlc2313, board-shape))
  set-rules(ocdb/rules/jlcpcb-rules)

  if check? :
    val analyzed-design = ocdb/generator-utils/run-final-passes(circuit)
    set-main-module(analyzed-design) ; Treat the provided module as a design, and compile it.
    run-checks("checks.txt")
  else:  
    set-main-module(circuit) ; Treat the provided module as a design, and compile it.
    view-board()
    view-schematic()

defn run-design (circuit:Instantiable) :
  run-design(circuit, false)

defn check-design (circuit:Instantiable) :
  run-design(circuit, true)

; ====================
; Export design to CAD
; ====================
defn export-design () :
  set-paper(ANSI-A4)
  set-export-backend(`altium)
  export-cad()

; ===================================
; Update CAD, keeping layout progress
; ===================================
defn update-design () :
  set-export-board?(false)
  export-design()

; =================
; Export BOM to csv
; =================
defn export-bill-of-materials () :
  set-bom-vendors(ocdb/design-vars/APPROVED-DISTRIBUTOR-LIST)
  set-bom-design-quantity(ocdb/design-vars/DESIGN-QUANTITY)
  export-bom()

; ============
; Run the code
; ============
run-design(my-design)
